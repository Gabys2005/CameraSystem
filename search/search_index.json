{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":""},{"location":"#downloading-and-inserting-the-model","title":"Downloading and inserting the model","text":"<p>Installing the Camera System is very simple. Here are the steps:</p> <ul> <li>Get the model on Roblox from this link</li> <li>Insert it into Workspace</li> <li>Change the settings (make sure to add your username to the <code>GuiOwners</code> setting)</li> <li>Done! When you start the game, you should see a camera icon on your topbar, next to the chat icon</li> </ul>"},{"location":"#settings","title":"Settings","text":"<ul> <li><code>GuiOwners</code> - This setting tells the system who should have access to the control panel. If you want to add more people then do it like <code>{\"Username1\", \"Username2\"}</code></li> <li><code>Theme</code> - The color theme of the control panel, either <code>Light</code> or <code>Dark</code></li> <li><code>AccelerateStart</code> - If set to <code>true</code>, moving cameras will start slow and speed up</li> <li><code>DecelerateEnd</code> - If set to <code>true</code>, moving cameras will start slowing down at the end of their path</li> <li><code>ToggleGui</code> - What <code>ScreenGui</code>s should be toggled when someone presses the Watch button</li> <li><code>WatchButtonPosition</code> - Where the button should be positioned on the topbar, either <code>Left</code>, <code>Center</code> or <code>Right</code></li> <li><code>Keybinds</code> - Check out the Keybinds section for an explanation</li> <li><code>BarOffsets</code> - This setting will move the bars down by X pixels for specified people, this is mainly for streamers to keep the bars even</li> <li><code>BeforeLoad</code> - This function will run before the clients load, useful for adding cameras by other scripts etc.</li> <li><code>FreeAdmin</code> - Who should be able to bypass the <code>GuiOwners</code> setting, <code>None</code>: nobody, <code>Owners</code>: private server owners, <code>All</code>: everybody</li> </ul>"},{"location":"api/","title":"API","text":"<p>Warning</p> <p>The api is not finished yet, a lot more stuff will be added to it in the future. Current functions shouldn't change however.</p>"},{"location":"api/#using-the-api","title":"Using the API","text":"<p>To use the API, simply require the <code>Api</code> module inserted into the main CameraSystem folder: <pre><code>local api = require(workspace.CameraSystem:WaitForChild(\"Api\"))\n</code></pre></p>"},{"location":"api/#api-documentation","title":"Api documentation","text":"<p>Info</p> <p>Shared apis can be accessed from local and server scripts. Server-only and Client-only apis can only be accessed from the server or client</p>"},{"location":"api/#shared","title":"Shared","text":""},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#getcamsbyid","title":"GetCamsById()","text":"<p>Used to get all cameras, indexed by their id <pre><code>local cams = api:GetCamsById()\nprint(cams)\n</code></pre></p>"},{"location":"api/#getcamidbynamecamtype-string-camname-string","title":"GetCamIdByName(camType: string, camName: string)","text":"<p>Used to get a camera's id by it's name <pre><code>local camId = api:GetCamIdByName(\"Static\", \"Test\")\n</code></pre></p>"},{"location":"api/#getcambyidcamtype-string-camid-number","title":"GetCamById(camType: string, camId: number)","text":"<p>Used to get the camera instance (part or model) by id <pre><code>local camPart = api:GetCamById(\"Static\", \"Test\")\n</code></pre></p>"},{"location":"api/#getdefaultcamposition","title":"GetDefaultCamPosition()","text":"<p>Used to get the position of the default camera. Returns a Vector3 <pre><code>local camPos = api:GetDefaultCamPosition()\n</code></pre></p>"},{"location":"api/#server-only","title":"Server-only","text":""},{"location":"api/#methods_1","title":"Methods","text":""},{"location":"api/#changecamcamtype-string-camidorname-numberstring","title":"ChangeCam(camType: string, camIdOrName: number|string)","text":"<p>Used to change the current camera <pre><code>api:ChangeCam(\"Static\", \"Test\")\n-- Or\napi:ChangeCam(\"Static\", 1)\n</code></pre></p>"},{"location":"api/#getcurrentcamera","title":"GetCurrentCamera()","text":"<p>Used to get basic information about the current camera <pre><code>print(api:GetCurrentCamera()) -- { Id = 1, Model = &lt;Model&gt;, Type = \"Static\" }\n</code></pre></p>"},{"location":"api/#focuswhotofocuson-basepartstringnil","title":"Focus(whoToFocusOn: BasePart|string|nil)","text":"<p>Used to change the focus. If <code>whoToFocusOn</code> is a part, then it'll just focus on it. If it's a string, then it'll try to find a player whose name starts with it. If it's nil, then it will unfocus. <pre><code>api:Focus(workspace.Part) -- focus on a part\napi:Focus(\"gabys2005\") -- focus on a player\napi:Focus(nil) -- unfocus\n</code></pre></p>"},{"location":"api/#getfocus","title":"GetFocus()","text":"<p>Returns the current focus point <pre><code>local focus = api:GetFocus()\nprint(focus) -- { Type = \"Player\", Instance = HumanoidRootPart } OR { Type = \"Part\", Instance = Part }\n</code></pre></p>"},{"location":"api/#changefovfov-number-time-number","title":"ChangeFov(fov: number, time: number?)","text":"<p>Change the fov. By default time is 0.1 <pre><code>api:ChangeFov(120) -- Change focus to 120 in 0.1 seconds\napi:ChangeFov(30,5) -- Change focus to 30 over 5 seconds\n</code></pre></p>"},{"location":"api/#changeautofovenable-boolean","title":"ChangeAutoFov(enable: boolean)","text":"<p>Enable or disable auto fov <pre><code>api:ChangeAutoFov(true) -- enable\napi:ChangeAutoFov(false) -- disable\n</code></pre></p>"},{"location":"api/#changesmoothfocusenable-boolean","title":"ChangeSmoothFocus(enable: boolean)","text":"<p>Enable or disable smooth focus <pre><code>api:ChangeSmoothFocus(true) -- enable\napi:ChangeSmoothFocus(false) -- disable\n</code></pre></p>"},{"location":"api/#changeblurblur-number-time-number","title":"ChangeBlur(blur: number, time: number?)","text":"<p>Change the blur. By default time is 0.1 <pre><code>api:ChangeBlur(20) -- change the blur to 20\napi:ChangeBlur(0, 5) -- change the blur to 0 over 5 seconds\n</code></pre></p>"},{"location":"api/#changesaturationsaturation-number-time-number","title":"ChangeSaturation(saturation: number, time: number?)","text":"<p>Change the saturation. By default time is 0.1 <pre><code>api:ChangeSaturation(-1) -- change the saturation to -1\napi:ChangeSaturation(1, 3) -- change the saturationt to 1 over 3 seconds\n</code></pre></p>"},{"location":"api/#changetilttilt-number-time-number","title":"ChangeTilt(tilt: number, time: number?)","text":"<p>Change the tilt. By default time is 0.1 <pre><code>api:ChangeTilt(45) -- change the tilt to 45\napi:ChangeTilt(-45, 6) -- change the tilt to -45 over 6 seconds\n</code></pre></p>"},{"location":"api/#changeblackoutenabled-boolean","title":"ChangeBlackout(enabled: boolean?)","text":"<p>Change the blackout. If enabled is not defined then blackout will be toggled. <pre><code>api:ChangeBlackout(true) -- enable blackout\napi:ChangeBlackout(false) -- disable blackout\napi:ChangeBlackout() -- toggle blackout\n</code></pre></p>"},{"location":"api/#changebarsenabledenabled-boolean","title":"ChangeBarsEnabled(enabled: boolean?)","text":"<p>Change the bars. If enabled is not defined then blackout will be toggled. <pre><code>api:ChangeBarsEnabled(true) -- enable bars\napi:ChangeBarsEnabled(false) -- disable bars\napi:ChangeBarsEnabled() -- toggle bars\n</code></pre></p>"},{"location":"api/#changebarsizesize-number-time-number","title":"ChangeBarSize(size: number, time: number?)","text":"<p>Change the bar size. By default time is 0.1 <pre><code>api:ChangeBarSize(10) -- change bar size to 10%\napi:ChangeBarSize(30, 5) -- change bar size to 30% over 5 seconds\n</code></pre></p>"},{"location":"api/#changetransitionname-string","title":"ChangeTransition(name: string)","text":"<p>Change the transition type. <code>name</code> is either <code>None</code>, <code>Black</code> or <code>White</code> <pre><code>api:ChangeTransition(\"Black\")\n</code></pre></p>"},{"location":"api/#changetransitionspeedspeed-number","title":"ChangeTransitionSpeed(speed: number)","text":"<p>Change the transition speed. Speed is the % of the base speed, so speed = 50 means half the speed <pre><code>api:ChangeTransitionSpeed(50)\n</code></pre></p>"},{"location":"api/#changeshakeshake-number","title":"ChangeShake(shake: number)","text":"<p>Change the shake intensity. <pre><code>api:ChangeShake(5)\n</code></pre></p>"},{"location":"api/#getfov","title":"GetFov()","text":"<p>Returns the current FOV <pre><code>print(api:GetFov()) -- { Value = 70, Time = 0.1 }\n</code></pre></p>"},{"location":"api/#getblur","title":"GetBlur()","text":"<p>Returns the current blur <pre><code>print(api:GetBlur()) -- { Value = 0, Time = 0.1 }\n</code></pre></p>"},{"location":"api/#getsaturation","title":"GetSaturation()","text":"<p>Returns the current saturation <pre><code>print(api:GetSaturation()) -- { Value = 0, Time = 0.1 }\n</code></pre></p>"},{"location":"api/#gettilt","title":"GetTilt()","text":"<p>Returns the current tilt <pre><code>print(api:GetTilt()) -- { Value = 0, Time = 0.1 }\n</code></pre></p>"},{"location":"api/#getbarsenabled","title":"GetBarsEnabled()","text":"<p>Returns a boolean indicating whether or not bars are enabled <pre><code>print(api:GetBarsEnabled()) -- false\n</code></pre></p>"},{"location":"api/#getbarsize","title":"GetBarSize()","text":"<p>Returns the current bar size <pre><code>print(api:GetBarSize()) -- 0\n</code></pre></p>"},{"location":"api/#gettransition","title":"GetTransition()","text":"<p>Returns the current transition's name <pre><code>print(api:GetTransition()) -- \"Black\"\n</code></pre></p>"},{"location":"api/#gettransitionspeed","title":"GetTransitionSpeed()","text":"<p>Returns the current transition speed <pre><code>print(api:GetTransitionSpeed()) -- 100\n</code></pre></p>"},{"location":"api/#getshake","title":"GetShake()","text":"<p>Returns the current shake intensity <pre><code>print(api:GetShake()) -- 0\n</code></pre></p>"},{"location":"api/#events","title":"Events","text":""},{"location":"api/#apicamerachanged","title":"api.CameraChanged","text":"<p>Fired when the camera changes <pre><code>api.CameraChanged:Connect(function(camType, camId)\nprint(\"Camera changed to a \" .. camType .. \" camera with an id of \" .. camId)\nend)\n</code></pre></p>"},{"location":"api/#apifocuschanged","title":"api.FocusChanged","text":"<p>Fired when the focus changes <pre><code>api.FocusChanged:Connect(function(focusData)\nprint(\"Focus changed:\", focusData)\nend)\n</code></pre></p>"},{"location":"api/#apifovchanged","title":"api.FovChanged","text":"<p>Fired when the fov changes <pre><code>api.FovChanged:Connect(function(newFov, changeTime)\nprint(\"Fov changed to:\", newFov, \"in\", changeTime, \"seconds\")\nend)\n</code></pre></p>"},{"location":"api/#apiblurchanged","title":"api.BlurChanged","text":"<p>Fired when the blur changes <pre><code>api.BlurChanged:Connect(function(newBlur, changeTime)\nprint(\"Blur changed to:\", newBlur, \"in\", changeTime, \"seconds\")\nend)\n</code></pre></p>"},{"location":"api/#apisaturationchanged","title":"api.SaturationChanged","text":"<p>Fired when the saturation changes <pre><code>api.SaturationChanged:Connect(function(newSaturation, changeTime)\nprint(\"Saturation changed to:\", newSaturation, \"in\", changeTime, \"seconds\")\nend)\n</code></pre></p>"},{"location":"api/#apitiltchanged","title":"api.TiltChanged","text":"<p>Fired when the blur changes <pre><code>api.TiltChanged:Connect(function(newTilt, changeTime)\nprint(\"Tilt changed to:\", newTilt, \"in\", changeTime, \"seconds\")\nend)\n</code></pre></p>"},{"location":"api/#apiblackoutchanged","title":"api.BlackoutChanged","text":"<p>Fired when the blackout gets enabled or disabled <pre><code>api.BlackoutChanged:Connect(function(isEnabled)\nprint(\"Blackout is now\", if isEnabled then \"Enabled\" else \"Disabled\")\nend)\n</code></pre></p>"},{"location":"api/#apibarsenabledchanged","title":"api.BarsEnabledChanged","text":"<p>Fired when the bars get enabled or disabled <pre><code>api.BarsEnabledChanged:Connect(function(isEnabled)\nprint(\"Bars are now\", if isEnabled then \"Enabled\" else \"Disabled\")\nend)\n</code></pre></p>"},{"location":"api/#apibarsizechanged","title":"api.BarSizeChanged","text":"<p>Fired when the bar size changes <pre><code>api.BarSizeChanged:Connect(function(newSize, changeTime)\nprint(\"Bar size changed to:\", newSize, \"in\", changeTime, \"seconds\")\nend)\n</code></pre></p>"},{"location":"api/#apitransitionchanged","title":"api.TransitionChanged","text":"<p>Fired when the transition type changes <pre><code>api.TransitionChanged:Connect(function(transitionName)\nprint(\"Bar size changed to:\", transitionName)\nend)\n</code></pre></p>"},{"location":"api/#apitransitionspeedchanged","title":"api.TransitionSpeedChanged","text":"<p>Fired when the transition speed changes <pre><code>api.TransitionSpeedChanged:Connect(function(newSpeed)\nprint(\"Transition speed changed to:\", newSpeed)\nend)\n</code></pre></p>"},{"location":"api/#apishakechanged","title":"api.ShakeChanged","text":"<p>Fired when the shake intensity changes <pre><code>api.ShakeChanged:Connect(function(newIntensity)\nprint(\"Shake intensity changed to:\", newIntensity)\nend)\n</code></pre></p>"},{"location":"api/#client-only","title":"Client-only","text":""},{"location":"api/#events_1","title":"Events","text":""},{"location":"api/#apistartedwatching","title":"api.StartedWatching","text":"<p>Fired when the local player pressed the \"Watch\" button <pre><code>api.StartedWatching:Connect(function()\nprint(\"Player started watching\")\nend)\n</code></pre></p>"},{"location":"api/#apistoppedwatching","title":"api.StoppedWatching","text":"<p>Fired when the local player stopped watching (unpressed the \"Watch\" button) <pre><code>api.StoppedWatching:Connect(function()\nprint(\"Player stopped watching\")\nend)\n</code></pre></p>"},{"location":"basicinfo/","title":"Basic information","text":""},{"location":"basicinfo/#attributes","title":"Attributes","text":"<p>Throughout the documentation I mention attributes multiple times, but some people still don't know what they are so:</p> <ul> <li>Attributes are basically custom properties</li> <li>They are accessible at the bottom of the <code>Properties</code> window</li> <li>You can create your own by clicking the <code>Add Attribute</code> button</li> <li>Some attributes are optional, I'll always include their name and type when mentioning them</li> </ul>"},{"location":"basicinfo/#colors","title":"Colors","text":"<p>By default the cameras come color-coded to easily differentiate between them, but note that it's completely optional</p>"},{"location":"basicinfo/#output","title":"Output","text":"<p>When asking for help, I'll often ask you to check the output for errors.</p> <ul> <li>If you're in Studio, you can go to the <code>View</code> tab on the top and click <code>Output</code> to show it</li> <li>If you're in game, you can click <code>F12</code> on your keyboard or type <code>/console</code> in the chat to open up the Developer Console, but here you need to check both the <code>Client</code> and <code>Server</code> tabs</li> </ul>"},{"location":"basicinfo/#bugs-feature-requests-etc","title":"Bugs, feature requests, etc.","text":"<p>If you found a bug, want a feature added or just need help, you can DM me on Discord: Gabys2005#1691, or on Twitter: @Gabys20005</p> <p>I put most bugs and feature requests on this Trello board.</p>"},{"location":"cameracategories/","title":"Camera categories","text":"<p>Cameras can be categorised into folders to make it easier to find the one you're looking for.</p> <p>A camera category can be a Folder or a Color3Value</p> <ul> <li>If it's a Folder, then setting a <code>Color</code> attribute on it (type - <code>Color3</code>) will change the header color inside of the control panel</li> <li>If it's a Color3Value, then setting it's value will change the header</li> <li>Categories can have an <code>Order</code> (type - <code>number</code>) attribute set to it to change the order they'll appear in</li> </ul> <p>If a camera isn't in a category then it'll go into a category named <code>Uncategorised</code> at the bottom of the camera chooser</p> <p>Example</p> <p>In the image below:</p> <ul> <li><code>Cam1</code> and <code>This should be in test folder</code> are in the <code>TestFolder</code> category, <code>Cam2</code> and <code>Yass</code> are in the <code>C3ValueTest</code> category, and <code>Cam3</code> and <code>Updating</code> are in the <code>Uncategorised</code> category</li> <li><code>TestFolder</code> category will have a green banner, while <code>C3ValueTest</code> category will have a red banner</li> </ul> <p> </p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#can-i-add-in-more-cameras","title":"Can I add in more cameras?","text":"<p>Yes, you just need to duplicate (or copy-paste) one of the example ones.</p>"},{"location":"faq/#it-doesnt-work","title":"It doesn't work","text":"<p>If something doesn't work then you can DM me on Discord (Gabys2005#1691) or Twitter (@Gabys20005) and I'll try to help.</p>"},{"location":"focuspoints/","title":"Focus points","text":"<p>Focus points are parts (or ObjectValues) that you can focus on, just like on any player. By default they're pink, but that can be changed. They can be named anything you want.</p> <ul> <li>If a focus point is a Part, then focusing on it will focus on it's position.</li> <li>If a focus point is an ObjectValue, then focusing on it will focus on whatever the value is pointing at. This is useful for focusing on NPCs for example.</li> </ul>"},{"location":"keybinds/","title":"Keybinds","text":"<p>In the Settings script you can customise your keybinds. To enable them in game, go to the local settings and toggle <code>Keybinds</code> on.</p>"},{"location":"keybinds/#keybind-structure","title":"Keybind structure","text":"<p>The basic keybind structure is <code>{Keys = {KEYS_TO_ACTIVATE}, Action = {ACTION}}</code></p>"},{"location":"keybinds/#keys","title":"Keys","text":"<p><code>KEYS_TO_ACTIVATE</code> is a table of keys that need to be pressed down for the keybind to activate, for example:</p> <ul> <li><code>Keys = {Enum.KeyCode.X}</code> if you want the keybind to activate when X is pressed</li> <li><code>Keys = {Enum.KeyCode.LeftShift,Enum.KeyCode.One}</code> if you want the keybind to activate when Shift is pressed down and you press 1</li> </ul> <p>For a full list of keys you can input, check out the Developer wiki page</p>"},{"location":"keybinds/#actions","title":"Actions","text":"<p><code>ACTION</code> is a table that tells the system what should happen when the keys are pressed, here's a full list of actions:</p> <ul> <li><code>{\"Fov\", FOV, TIME}</code> to change the fov, for example <code>{\"Fov\", 120, 6}</code> to change the fov to 120 over 6 seconds</li> <li><code>{\"Blackout\", BOOL?}</code> to toggle the blackout, for example <code>{\"Blackout\", true}</code> to enable it and <code>{\"Blackout\", false}</code> to disable it. If the true or false isn't specified, then the keybind will work as a toggle.</li> <li><code>{\"Bars\", BOOL?\"}</code> to toggle the bars. Same as above.</li> <li><code>{\"Transition\", TRANSITION_NAME}</code> to change the transition type, currently <code>TRANSITION_NAME</code> can only be <code>None</code>, <code>Black</code> or <code>White</code>. For example <code>{\"Transition\", \"Black\"}</code> to change the transition to black.</li> <li><code>{\"TransitionSpeed\", SPEED\"}</code> to change the transition speed, <code>SPEED</code> is a number that represents the % of the normal speed, so <code>{\"TransitionSpeed\", 100}</code> for normal speed, <code>{\"TransitionSpeed\", 50}</code> for half the speed (50%), etc.</li> <li><code>{\"Shake, INTENSITY}</code> to change the intensity of the Shake effect, set to 0 to disable. For example <code>{\"Shake\", 5}</code> to set the shaking to intensity 5.</li> <li><code>{\"Blur\", BLUR, TIME}</code> to change the blur. Same as FOV.</li> <li><code>{\"Saturation\", SATURATION, TIME}</code> to change the saturation. Same as FOV. Saturation = -1 means the image will be black and white</li> <li><code>{\"Tilt\", TILT, TIME}</code> to change the tilt. Same as FOV. Tilt = 0 means no tilt.</li> <li><code>{\"Camera\", CAMERA_TYPE, CAMERA_NAME}</code> to change the camera, for example <code>{\"Camera\", \"Static\", \"TEST\"}</code> will change the camera to a static one named <code>TEST</code></li> </ul> <p>Example</p> <p>By default, the system comes with those keybinds: <pre><code>{Keys = {Enum.KeyCode.X}, Action = {\"Fov\",30,5}};\n{Keys = {Enum.KeyCode.C}, Action = {\"Fov\",120,5}};\n{Keys = {Enum.KeyCode.V}, Action = {\"Camera\",\"Static\",\"Updating\"}};\n</code></pre> This means that:</p> <ul> <li>When X is pressed, the fov will change to 30 over 5 seconds</li> <li>When C is pressed, the fov will change to 120 over 5 seconds</li> <li>When V is pressed, the camera will change to the one named <code>Updating</code></li> </ul>"},{"location":"updating/","title":"Updating from V4 to V5","text":"<p>Warning</p> <p>If you're not using V4 in your game, you don't need to do this</p> <p>Info</p> <p>The updating process will be simplified once the plugin gets released</p>"},{"location":"updating/#updating-cameras","title":"Updating cameras","text":"<ul> <li>Run code from here in the command bar (View &gt; Command Bar)</li> <li>Insert V5</li> <li>Delete <code>Static</code> and <code>Moving</code> folders from V5</li> <li>Move those folders from V4 to V5</li> <li>Move the drones from V4 to V5 (make sure you insert the <code>SetupDrone</code> script into every drone)</li> <li>Move over the settings</li> <li>Delete V4</li> </ul>"},{"location":"updating/#updating-keybinds","title":"Updating keybinds","text":"<ul> <li>Change <code>Run</code> to <code>Action</code></li> <li>Change <code>FOV</code> to <code>Fov</code></li> <li>Change <code>ChangeCam</code> to <code>Camera</code>, additionally you don't need to use the <code>api:GetCamIdFromName()</code> thing, just insert the camera's name, for example <code>{\"Camera\", \"Static\", \"Test\"}</code></li> </ul>"},{"location":"camera-types/defaultcam/","title":"Default Camera","text":"<p>This camera will be selected when the game starts, and can't be selected after selecting a different one. By default it's color is pink. It's name has to be <code>Default</code> and it has to be directly in the <code>Cameras</code> folder.</p> <p>You can get the position of the default camera through the API by using the <code>GetDefaultCamPosition()</code> method like this: <pre><code>local api = require(workspace.CameraSystem:WaitForChild(\"Api\"))\nlocal defaultCamPosition = api:GetDefaultCamPosition()\n</code></pre></p>"},{"location":"camera-types/drones/","title":"Drones","text":"<p>Drones are the only physical cameras available by default. You can control them in the <code>Drones</code> menu.</p> <p>Note: each drone includes a <code>SetupDrone</code> script, when updating from V4 to V5, make sure you insert it.</p>"},{"location":"camera-types/drones/#controls","title":"Controls","text":"<p>Here are the controls for the time when you're controlling a drone:</p> <ul> <li><code>WSAD</code> - move forward, backward, left or right</li> <li><code>E</code> - move up</li> <li><code>Q</code> - move down</li> <li><code>Mouse movement</code> - move the camera around</li> </ul>"},{"location":"camera-types/movingcams/","title":"Moving Cameras","text":"<p>Moving cameras are cameras that move on the defined track. The individual parts in the model have to be named from 1 to however many points you have. By default the first point is green, last is red and every other is yellow.</p>"},{"location":"camera-types/movingcams/#required-attributes","title":"Required attributes","text":"<ul> <li><code>Time</code> - type: <code>number</code> - The time it takes to get from the first point to the last point, in seconds.</li> </ul>"},{"location":"camera-types/movingcams/#optional-attributes","title":"Optional attributes","text":"<ul> <li><code>Bezier</code> - type: <code>boolean</code> - if set to true, the track will be a Bezier curve. Note: current implementation is pretty bad and could cause a lot of lag with a lot of points</li> <li><code>DisableFocus</code> - type: <code>boolean</code> - if set to <code>true</code>, focusing on someone won't change the camera angle on this camera</li> </ul>"},{"location":"camera-types/movingcams/#point-attributes","title":"Point attributes","text":"<p>Each point can have it's own attributes which can change the way the system moves along the track:</p> <ul> <li><code>Time</code> - type: <code>number</code> - The time it'll change to move from this point to the next one, only apples to this point</li> <li><code>Fov</code> - type: <code>number</code> - This attribute tells the system what fov should be set to at this point. If the point it is set on is the first one, then the fov will instantly snap to that value, otherwise it'll slowly transition from the last forced fov point, or from the beggining.</li> </ul>"},{"location":"camera-types/staticcams/","title":"Static Cameras","text":"<p>Static cameras are cameras that do not move. By default they're blue, but that can be changed.</p>"},{"location":"camera-types/staticcams/#optional-attributes","title":"Optional attributes","text":"<ul> <li><code>Fov</code> - type: <code>number</code> - What the fov should be set to when this camera is selected.</li> <li><code>Update</code> - type: <code>boolean</code> - if set to <code>true</code>, when that camera is selected, the system will update it's position every frame instead of once. Useful when you want to attach it to a physical camera model for example.</li> <li><code>DisableFocus</code> - type: <code>boolean</code> - if set to <code>true</code>, focusing on someone won't change the camera angle on this camera</li> </ul>"}]}